#define BLINKER_PRINT Serial
#define BLINKER_WIFI
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <Blinker.h>
 
char auth[] = "e303dd8981f1";//这里面填写设备的密钥
char ssid[] = "iap";//这里填写你的wifi名字
char pswd[] = "iapiapiap";//这里填写你的WiFi密码

//定义红外发射的管脚
const uint16_t kIrLed = 4;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.


uint16_t power_on[399]={3406, 434,  426, 792,  494, 1234,  470, 394,  470, 420,  466, 398,  470, 394,  470, 396,  494, 396,  470, 396,  468, 396,  492, 398,  470, 394,  468, 396,  494, 1236,  470, 394,  470, 394,  496, 394,  470, 396,  468, 396,  490, 400,  468, 396,  470, 394,  494, 396,  468, 396,  494, 396,  464, 400,  470, 394,  470, 396,  492, 396,  470, 396,  468, 422,  464, 1238,  470, 394,  470, 1232,  494, 1236,  470, 1232,  470, 1234,  492, 1236,  470, 1232,  470, 394,  494, 1234,  470, 1232,  470, 1234,  492, 1236,  470, 1234,  470, 1234,  490, 1238,  470, 1232,  494, 1210,  494, 398,  468, 396,  468, 422,  464, 400,  468, 396,  468, 396,  492, 398,  468, 396,  470, 396,  490, 1238,  468, 1234,  468, 398,  492, 398,  468, 1234,  470, 1234,  494, 1236,  468, 1234,  468, 396,  488, 402,  468, 1234,  444, 1260,  492, 400,  466, 398,  492, 398,  460, 1242,  466, 400,  466, 398,  490, 1238,  468, 398,  460, 430,  460, 406,  442, 1260,  468, 398,  490, 1238,  468, 1236,  462, 404,  486, 1240,  468, 1236,  466, 1238,  488, 404,  464, 1238,  442, 422,  488, 402,  442, 422,  462, 404,  484, 404,  442, 422,  488, 376,  488, 402,  442, 1260,  456, 1272,  458, 1244,  442, 1260,  442, 1262,  488, 1240,  442, 1262,  442, 1260,  486, 1242,  442, 1260,  458, 1246,  488, 1240,  442, 1260,  466, 400,  466, 424,  440, 422,  466, 426,  432, 430,  442, 422,  442, 424,  486, 404,  464, 1238,  464, 1238,  482, 1248,  462, 1242,  466, 400,  464, 426,  464, 400,  464, 1238,  484, 408,  464, 400,  464, 400,  484, 406,  466, 1238,  466, 1238,  488, 1242,  466, 400,  464, 1238,  492, 1236,  466, 400,  464, 1238,  488, 1240,  466, 398,  466, 426,  456, 406,  466, 1236,  490, 376,  488, 1240,  466, 398,  466, 400,  484, 1244,  466, 1236,  466, 1238,  488, 404,  464, 1238,  466, 400,  486, 1242,  466, 1238,  466, 400,  486, 404,  464, 400,  464, 400,  490, 400,  466, 1236,  466, 424,  458, 406,  466, 1236,  466, 1238,  488, 1240,  466, 1238,  492, 1212,  484, 406,  464, 400,  464, 400,  488, 402,  464, 1238,  464, 400,  484, 406,  464, 1238,  464, 1238,  486, 1244,  466, 1238,  464, 1238,  488, 404,  464, 1238,  464, 1238,  490, 400,  438};

uint16_t power_off[399]={3356, 492,  566, 668,  442, 1260,  420, 444,  420, 472,  464, 400,  420, 444,  420, 470,  440, 424,  420, 444,  420, 472,  442, 422,  420, 444,  420, 470,  464, 1238,  420, 444,  418, 472,  418, 444,  420, 444,  420, 470,  464, 400,  420, 446,  418, 472,  442, 422,  418, 446,  490, 400,  464, 400,  420, 444,  420, 472,  466, 398,  420, 444,  418, 472,  464, 1238,  420, 446,  418, 1310,  466, 1238,  420, 1284,  420, 1310,  442, 1260,  420, 1284,  420, 472,  418, 1284,  420, 1282,  420, 1310,  468, 1236,  420, 1284,  420, 1310,  464, 1238,  444, 1258,  494, 1236,  466, 400,  444, 420,  444, 446,  462, 402,  442, 422,  442, 448,  440, 424,  444, 420,  444, 446,  464, 1238,  444, 1258,  444, 448,  440, 424,  444, 1258,  444, 1284,  444, 1258,  444, 1258,  444, 446,  462, 402,  444, 1258,  444, 1284,  442, 424,  444, 420,  466, 424,  438, 1264,  444, 420,  444, 446,  440, 1262,  444, 420,  444, 446,  462, 402,  444, 1258,  444, 448,  438, 1262,  444, 1258,  444, 446,  442, 1262,  466, 1236,  444, 1286,  444, 420,  462, 1240,  468, 424,  442, 422,  444, 422,  442, 448,  438, 424,  444, 422,  468, 422,  440, 424,  468, 1234,  444, 1284,  438, 1264,  444, 1260,  468, 1262,  440, 1262,  444, 1260,  468, 1262,  468, 1236,  444, 1260,  442, 1286,  464, 1240,  466, 1236,  464, 426,  442, 422,  442, 422,  444, 448,  462, 402,  466, 398,  466, 424,  462, 402,  442, 1260,  464, 1264,  462, 1240,  466, 1238,  468, 424,  464, 400,  442, 422,  466, 1262,  462, 402,  466, 398,  466, 422,  438, 426,  462, 1240,  466, 1262,  466, 1238,  466, 398,  466, 1262,  466, 1236,  466, 398,  466, 1262,  464, 1238,  466, 398,  466, 424,  462, 402,  466, 1236,  492, 400,  464, 1238,  466, 398,  466, 424,  462, 1240,  468, 1236,  466, 1264,  462, 402,  466, 1236,  466, 424,  466, 1236,  466, 1238,  466, 424,  462, 402,  466, 398,  466, 424,  462, 404,  464, 1238,  464, 426,  460, 402,  466, 1238,  466, 1262,  464, 1240,  464, 1238,  486, 1242,  462, 404,  464, 400,  464, 426,  462, 402,  464, 400,  464, 1264,  462, 404,  466, 1236,  466, 1264,  462, 1242,  466, 1238,  466, 1264,  462, 1240,  464, 400,  466, 1264,  466, 400,  438};

BlinkerButton Button1("btn-poweron");
BlinkerButton Button2("btn-poweroff");

void Button1_callback(const String &state)
{

  BLINKER_LOG("get button state: ", state);
  //检测到开按钮按下（btn-pwron）
  if (state == BLINKER_CMD_BUTTON_TAP)
  {
    //发送红外指令
    irsend.sendRaw(power_on, 399, 38);  // Send a raw data capture at 38kHz.
    Button1.print("205空调开");
    Serial.print("205空调关");
    //test
  }
}
//回调函数
void Button2_callback(const String &state)
{
  BLINKER_LOG("get button state: ", state);
  //检测到关按钮按下
  if (state == BLINKER_CMD_BUTTON_TAP)
  {
    irsend.sendRaw(power_off, 399, 38);  // Send a raw data capture at 38kHz.
    Button2.print("205空调关");
    Serial.print("205空调关");
  }
}



void setup() {
  Serial.begin(115200);
  Button1.attach(Button1_callback);
  Button2.attach(Button2_callback);
  Blinker.begin(auth,ssid,pswd);
  //红外初始化
  irsend.begin();
}

void loop() {
  Blinker.run();
}
